from time import time

from utility.printable import Printable
from transaction import Transaction


class Block(Printable):
    """A single block of our blockchain.

    Attributes:
        :index: The index of this block.
        :previous_hash: The hash of the previous block in the blockchain.
        :timestamp: The timestamp of the block (automatically generated by
        default).
        :transactions: A list of transaction which are included in the block.
        :proof: The proof of work number that yielded this block.
    """

    def __init__(self, index, previous_hash, transactions, proof, time=time()):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = time
        self.transactions = transactions
        self.proof = proof




    @staticmethod
    def convert_from_json(jsonBlock):
        block = Block(jsonBlock['index'],
        jsonBlock['previous_hash'],
        [Transaction.to_transaction_from_dict(tx) for tx in jsonBlock['transactions']],
        jsonBlock['proof'],
        jsonBlock['timestamp'])
        return block


    @staticmethod
    def Contains_Block(chain, block):
        index = block['index']
        if len(chain) <= index:
            return False
        elementBlock = chain[index]
        if (elementBlock.index == index and
           elementBlock.previous_hash == block['previous_hash'] and
           elementBlock.timestamp == block['timestamp'] and
           elementBlock.proof == bock['proof'] and
           Transaction.compare_transactions(elementBlock.transactions, block['transactions'])):
                return True
        return False


    @staticmethod
    def sameBlock(block1, block2):
        if (block1.index != block2.index or
        block1.previous_hash != block2.previous_hash or
        block1.timestamp != block2.timestamp or
        block1.proof != block2.proof or
        not Transaction.compare_transactions_list(block1.transactions, block2.transactions)):
            return False
        return True 


